import { useState, useEffect, useRef } from 'react'
import './App.css'

function App() {
  const [currentQuestion, setCurrentQuestion] = useState('')
  const [isSpinning, setIsSpinning] = useState(false)
  const [showQuestion, setShowQuestion] = useState(false)
  const [questionsData, setQuestionsData] = useState([])
  const [questionsPath, setQuestionsPath] = useState('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ')
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState(null)
  const intervalRef = useRef(null)
  const SPIN_SPEED = 50 // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–æ—Ç–∞—Ü–∏–∏

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
  const loadQuestions = async () => {
    try {
      setIsLoading(true)
      setError(null)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Electron API
      if (window.electronAPI) {
        const [path, ...questions] = await window.electronAPI.loadQuestions()
        setQuestionsData(questions)
        setQuestionsPath(path)
        
        if (questions.length === 0) {
          setError('–§–∞–π–ª questions.json –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        }
      } else {
        // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        try {
          const response = await fetch('/src/data/questions.json')
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`)
          }
          const questions = await response.json()
          setQuestionsData(questions)
        } catch (fetchError) {
          console.error('–û—à–∏–±–∫–∞ fetch:', fetchError)
          setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ questions.json')
          setQuestionsData([])
        }
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:', err)
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ questions.json')
      setQuestionsData([])
    } finally {
      setIsLoading(false)
    }
  }

  const startSpinning = () => {
    setIsSpinning(true)
    setShowQuestion(false)
    
    intervalRef.current = setInterval(() => {
      const randomIndex = Math.floor(Math.random() * questionsData.length)
      setCurrentQuestion(questionsData[randomIndex])
    }, SPIN_SPEED)
  }

  const stopSpinning = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }
    setIsSpinning(false)
    setShowQuestion(true)
  }

  const restart = () => {
    setShowQuestion(false)
    setCurrentQuestion('')
    setIsSpinning(false)
    if (intervalRef.current) {
      clearInterval(intervalRef.current)
      intervalRef.current = null
    }
  }



  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    loadQuestions()
    
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
      }
    }
  }, [])

  // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
  if (isLoading) {
    return (
      <div className="app">
        <div className="container">
          <h1 className="title">üéØ –†–æ—Ç–∞—Ü–∏—è –í–æ–ø—Ä–æ—Å–æ–≤</h1>
          <div className="loading">
            <div className="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...</p>
          </div>
          <p>–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {questionsPath}</p>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  if (error) {
    return (
      <div className="app">
        <div className="container">
          <h1 className="title">üéØ –†–æ—Ç–∞—Ü–∏—è –í–æ–ø—Ä–æ—Å–æ–≤</h1>
          <div className="error">
            <h2>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
            <p>{error}</p>
            <button className="btn btn-restart" onClick={loadQuestions}>
              üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
          <p>–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {questionsPath}</p>
        </div>
      </div>
    )
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
  if (questionsData.length === 0) {
    return (
      <div className="app">
        <div className="container">
          <h1 className="title">üéØ –†–æ—Ç–∞—Ü–∏—è –í–æ–ø—Ä–æ—Å–æ–≤</h1>
          <div className="error">
            <h2>üìù –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤</h2>
            <p>–§–∞–π–ª questions.json –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
            <button className="btn btn-restart" onClick={loadQuestions}>
              üîÑ –û–±–Ω–æ–≤–∏—Ç—å
            </button>
          </div>
          <p>–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {questionsPath}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="app">
      <div className="container">
        <h1 className="title">üéØ –†–æ—Ç–∞—Ü–∏—è –í–æ–ø—Ä–æ—Å–æ–≤</h1>
        
        <div className="question-display">
          {showQuestion && currentQuestion ? (
            <div className="final-question">
              <h2>–í–∞—à –≤–æ–ø—Ä–æ—Å:</h2>
              <p className="question-text final">{currentQuestion}</p>
            </div>
          ) : (
            <div className="spinning-question">
              <h2>–í–æ–ø—Ä–æ—Å:</h2>
              <p className="question-text spinning">
                {currentQuestion || '–ù–∞–∂–º–∏—Ç–µ "–ü—É—Å–∫" –¥–ª—è –Ω–∞—á–∞–ª–∞'}
              </p>
            </div>
          )}
        </div>

        <div className="controls">
          {!isSpinning && !showQuestion && (
            <button 
              className="btn btn-start" 
              onClick={startSpinning}
            >
              üöÄ –ü—É—Å–∫
            </button>
          )}
          
          {isSpinning && (
            <button 
              className="btn btn-stop" 
              onClick={stopSpinning}
            >
              ‚èπÔ∏è –°—Ç–æ–ø
            </button>
          )}
          
          {showQuestion && (
            <button 
              className="btn btn-restart" 
              onClick={restart}
            >
              üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ
            </button>
          )}
          
          <button 
            className="btn btn-refresh" 
            onClick={loadQuestions}
            title="–û–±–Ω–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞"
          >
            üìÑ –û–±–Ω–æ–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã
          </button>
        </div>

        {isSpinning && (
          <div className="spinning-indicator">
            <div className="spinner"></div>
            <p>–ö—Ä—É—Ç–∏–º –≤–æ–ø—Ä–æ—Å—ã...</p>
          </div>
        )}
      </div>
      <p>–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {questionsPath}</p>
    </div>
  )
}

export default App 